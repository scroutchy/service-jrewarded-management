# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Gradle.gitlab-ci.yml

# This is the Gradle build system for JVM applications
# https://gradle.org/
# https://github.com/gradle/gradle

image: gradle:jdk17-alpine

services:
  - name: docker:dind
    alias: docker
    command: [ "--tls=false" ]

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: unix:///var/run/docker.sock
  TESTCONTAINERS_HOST_OVERRIDE: "host.docker.internal"
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  IMAGE_NAME: "service-jrewarded-management"
  REGISTRY: "registry.gitlab.com/cinema7590904"


stages:
  - build
  - test
#  - sonar
  - publish
#  - container_scan
#  - deploy

build:
  stage: build
  script:
    - gradle --build-cache assemble
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: push
    paths:
      - build
      - .gradle
  artifacts:
    paths:
      - build/libs/service-jrewarded-management-0.0.1-SNAPSHOT.jar
    expire_in: 1 day

test:
  stage: test
  script: gradle check
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - build
      - .gradle
  dependencies:
    - build
  artifacts:
    reports:
      junit: build/test-results/test/**/TEST-*.xml
      coverage_report:
        coverage_format: cobertura
        path: build/reports/jacoco/test/jacocoTestReport.xml
    paths:
      - build/reports/jacoco/test/jacocoTestReport.xml
  coverage: '/Total.*?([0-9,.]{1,5})%/'

publish:
  stage: publish
  before_script:
    - apk add --no-cache docker
    - docker version
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $REGISTRY
    - IMAGE_TAG=${CI_COMMIT_REF_SLUG}
  script:
    - ls -la build/libs/
    - docker build -t $REGISTRY/$IMAGE_NAME:$IMAGE_TAG .
    - docker push $REGISTRY/$IMAGE_NAME:$IMAGE_TAG
  dependencies:
    - build
  artifacts:
    paths:
      - build/libs/*.jar